<?xml version="1.0"?>
<!--
 | regain - A file search engine providing plenty of formats
 | Copyright (C) 2004  Til Schneider
 | 
 | This library is free software; you can redistribute it and/or
 | modify it under the terms of the GNU Lesser General Public
 | License as published by the Free Software Foundation; either
 | version 2.1 of the License, or (at your option) any later version.
 | 
 | This library is distributed in the hope that it will be useful,
 | but WITHOUT ANY WARRANTY; without even the implied warranty of
 | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 | Lesser General Public License for more details.
 | 
 | You should have received a copy of the GNU Lesser General Public
 | License along with this library; if not, write to the Free Software
 | Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 | 
 | Contact: Til Schneider, info@murfman.de
 |
 | CVS information:
 |  $RCSfile$
 |   $Source$
 |     $Date$
 |   $Author$
 | $Revision$
 |
 | Author: Til Schneider, www.murfman.de
 +-->
<project name="regain" default="targets" basedir=".">

  <!--
   | The properties and paths
   +-->
  <property file="build.properties"/>
  <property environment="env"/>
  
  <tstamp>
    <format property="timestamp" pattern="yyMMdd-HHmm"/>
  </tstamp>  

  <condition property="version" value="${version.prefix}-preview-${timestamp}">
    <istrue value="${is-preview}"/>
  </condition>
  <condition property="version" value="${version.prefix}">
    <isfalse value="${is-preview}"/>
  </condition>

  <property name="version.file" value="${version}"/>
  <property name="programname" value="Regain"/>
  <property name="programname.file" value="regain"/>

  <property name="doc.header" value="${programname} ${version} API"/>
  <property name="doc.title" value="API documentation for ${programname} ${version}"/>
  <property name="doc.bottom" value="${programname} ${version}, Copyright (C) 2004 Til Schneider, www.murfman.de"/>

  <property name="jacobgen-src.dir" value="temp/jacobgen/generated-src"/>
  <property name="jacobgen-classes.dir" value="temp/jacobgen/classes"/>
  <property name="jacobgen-packed.dir" value="jacobgen/packed"/>
  <property name="package-lists.dir" value="txt/package-lists"/>
  
  <property name="lucene.jar" value="lucene-1.4.2.jar"/>
  <property name="regexp.jar" value="jakarta-regexp-1.3.jar"/>
  <property name="log4j.jar" value="log4j-1.2.9.jar"/>
  
  <!-- Autodetect the platform -->
  <condition property="platform" value="linux">
    <os family="unix"/>
  </condition>
  <condition property="platform" value="win">
    <os family="windows"/>
  </condition>

  <path id="sourcepath">
    <pathelement location="src"/>
  </path>

  <path id="classpath">
    <pathelement location="temp/classes"/>
    <fileset dir="lib">
      <include name="*.jar"/>
    </fileset>
    <fileset dir="lib/${platform}">
      <include name="*.jar"/>
    </fileset>
  </path>

  <path id="jacobgen-classpath">
    <pathelement location="temp/classes"/>
    <fileset dir="lib">
      <include name="jacob.jar"/>
    </fileset>
  </path>

  <path id="docpath">
    <path refid="sourcepath"/>
  </path>



  <!--
   | Display all public targets
   +-->
  <target name="targets">
    <echo message="usage: build [target]"/>
    <echo message=""/>
    <echo message="available targets:"/>
    <echo message="  targets              Shows this list of targets."/>
    <echo message="  dump-info            Dumps some information (VM-Version...)."/>
    <echo message="  clean                Deletes the classes directory."/>
    <echo message="  clean-runtime        Deletes the runtime directory."/>
    <echo message="  clean-all            Deletes all generated directories."/>
    <echo message="                       (Without public and the deployed stuff)"/>
    <echo message="  clean-web            Deletes the deployed stuff (Without the config)."/>
    <echo message="  prepare              Prepares the compilation. (Extracts the libs)"/>
    <echo message="  prepare-once         Prepares the compilation if needed. (Extracts the libs)"/>
    <echo message="  doc                  Generates the JavaDoc documentation."/>
    <echo message="  make                 Compiles the source code."/>
    <echo message="  make-jacobgen        Compiles the source code generated by jacobgen"/>
    <echo message="  pack-jacobgen        Packs a zip file containing the generated jacobgen source"/>
    <echo message="                       and a jar file containing the classes."/>
    <echo message="  runtime-desktop      Prepares the desktop runtime directory."/>
    <echo message="  runtime-server       Prepares the server runtime directory."/>
    <echo message="  runtime              Prepares the runtime directory."/>
    <echo message="  runtime-desktop-fast Prepares the desktop runtime directory without the main jars."/>
    <echo message="  runtime-server-fast  Prepares the server runtime directory without the main jars."/>
    <echo message="  runtime-fast         Prepares the runtime directory without the main jars."/>
    <echo message="  run-crawler          Runs the crawler."/>
    <echo message="  run-crawler-fast     Runs the crawler without building the jars."/>
    <echo message="  run-desktop-fast     Runs the desktop without building the jars."/>
    <echo message="  jsmoothgen           Creates a windows executable using Jsmooth."/>
    <echo message="  installer            Creates a Windows installer for the project."/>
    <echo message="  public               Creates all the stuff that can be downloaded."/>
    <echo message="  deploy-web           Deploys the web content at the servlet engine."/>
    <echo message="  deploy-classes       Deploys the web content at the servlet engine."/>
    <echo message="  deploy-config        Deploys the config at the servlet engine."/>
    <echo message="  deploy-war           Deploys the war file at the servlet engine."/>
    <echo message="  all                  Creates all (Same as public)."/>
  </target>


  <!--
   | Dump some information.
   +-->
  <target name="dump-info">
    <echo message="JAVA_HOME=${env.JAVA_HOME}" />
    <echo message="java.vm.info=${java.vm.info}" />
    <echo message="java.vm.name=${java.vm.name}" />
    <echo message="java.vm.vendor=${java.vm.vendor}" />
    <echo message="java.vm.version=${java.vm.version}" />
    <echo message="os.arch=${os.arch}" />
    <echo message="os.name=${os.name}" />
    <echo message="os.version=${os.version}" />
    <echo message="file.encoding=${file.encoding}" />
    <echo message="user.language=${user.language}" />
  </target>


  <!--
   | Deletes the classes directory.
   +-->
  <target name="clean">
    <delete dir="temp/classes"/>
  </target>


  <!--
   | Deletes the runtime directory
   +-->
  <target name="clean-runtime">
    <delete dir="temp/runtime"/>
    <delete dir="temp/preparator"/>
    <delete dir="temp/web-temps"/>
  </target>


  <!--
   | Deletes all generated directories (Without public and the deployed stuff).
   +-->
  <target name="clean-all" depends="clean, clean-runtime">
    <delete dir="temp/included-lib-classes"/>
    <delete dir="temp/doc"/>
  </target>


  <!--
   | Deletes the deployed stuff (Without the config).
   +-->
  <target name="clean-web">
    <echo message="Deleting the deployed stuff from ${deploy-target.dir}"/>
    <delete dir="${deploy-target.dir}/${programname.file}"/>
    <delete file="${deploy-target.dir}/${programname.file}.war"/>
  </target>


  <!--
   | Prepares the compilation. (Extracts the libs)
   +-->
  <target name="prepare">
    <echo message="Extracting the lib jars ..." />
    <delete dir="temp/included-lib-classes"/>
    <mkdir dir="temp/included-lib-classes/common"/>
    <unjar dest="temp/included-lib-classes/common">
      <fileset dir="lib">
        <include name="*.jar"/>
      </fileset>
    </unjar>
    <unjar dest="temp/included-lib-classes/win">
      <fileset dir="lib/win">
        <include name="*.jar"/>
      </fileset>
    </unjar>
    <unjar dest="temp/included-lib-classes/linux">
      <fileset dir="lib/linux">
        <include name="*.jar"/>
      </fileset>
    </unjar>
  </target>


  <!--
   | Prepares the compilation. (Extracts the libs)
   | Does nothing if the libs were already extracted.
   +-->
  <target name="prepare-once" depends="-check-prepare, -prepare-if-needed"/>
  <target name="-check-prepare">
    <condition property="included-lib-classes.missing">
      <not>
        <available file="temp/included-lib-classes" type="dir"/>
      </not>
    </condition>
  </target>
  <target name="-prepare-if-needed" if="included-lib-classes.missing">
    <antcall target="prepare"/>
  </target>


  <!--
   | Generates the JavaDoc documentation.
   +-->
  <target name="doc">
    <echo message="Generating JavaDoc documentation ..." />
    <delete dir="temp/doc"/>
    <mkdir dir="temp/doc"/>
    <javadoc packagenames="*"
             sourcepathref="docpath"
             classpathref="classpath"
             destdir="temp/doc"
             doctitle="${doc.title}"
             windowtitle="${doc.title}"
             header="${doc.header}"
             bottom="${doc.bottom}"
             stylesheetfile="txt/stylesheet.css"
             access="private"
             charset="ISO-8859-1"
             failonerror="true">
             <!-- additionalparam="-breakiterator" -->
      <link offline="true"
            href="${java-api-location}"
            packagelistLoc="txt/dummy-jdk-api-doc"/>
    </javadoc>
  </target>



  <!--
   | Compiles the source code.
   +-->
  <target name="make">
    <echo message="Compiling the source code ..." />
    <mkdir dir="temp/classes"/>
    <javac destdir="temp/classes"
           debug="${debug}"
           deprecation="true"
           target="1.2">
           <!--
           executable="${java-1_2_2.dir}/bin/javac"
           fork="true">
           -->
      <src>
        <path refid="sourcepath"/>
      </src>
      <classpath>
        <path refid="classpath"/>
      </classpath>
    </javac>

    <copy todir="temp/classes">
      <fileset dir="src" includes="**/*.gif"/>
      <fileset dir="src" includes="**/*.jpg"/>
      <fileset dir="src" includes="**/*.dtd"/>
      <fileset dir="src" includes="**/*.properties"/>
    </copy>
  </target>


  <!--
   | Compiles the source code.
   +-->
  <target name="make-test" depends="make">
    <echo message="Compiling the test source code ..." />
    <mkdir dir="temp/classes"/>
    <javac destdir="temp/classes"
           debug="${debug}"
           deprecation="true"
           target="1.2">
      <src>
        <pathelement location="test/src"/>
      </src>
      <classpath>
        <path refid="classpath"/>
      </classpath>
    </javac>
  </target>


  <!--
   | Creates the preparator jars.
   +-->
  <target name="preparators" depends="make, prepare-once">
    <mkdir dir="temp/preparator"/>
    
    <jar jarfile="temp/preparator/PoiMsOfficePreparators.jar"
         compress="false" index="true">
      <manifest>
        <attribute name="Preparator-Classes" value=".PoiMsExcelPreparator;.PoiMsWordPreparator"/>
      </manifest>
      <fileset dir="temp/included-lib-classes/common">
        <include name="font_metrics.properties"/>
        <include name="org/apache/poi/**"/>
      </fileset>
      <fileset dir="temp/classes">
        <include name="net/sf/regain/crawler/preparator/PoiMs*"/>
      </fileset>
    </jar>

    <jar jarfile="temp/preparator/JacobMsOfficePreparators.jar"
         compress="false" index="true">
      <manifest>
        <attribute name="Preparator-Classes" value=".JacobMsExcelPreparator;.JacobMsWordPreparator;.JacobMsPowerPointPreparator"/>
      </manifest>
      <fileset dir="temp/included-lib-classes/common">
        <include name="com/jacob/**"/>
        <include name="de/filiadata/lucene/spider/generated/msoffice2000/**"/>
      </fileset>
      <fileset dir="temp/classes">
        <include name="net/sf/regain/crawler/preparator/AbstractJacobMsOfficePreparator.*"/>
        <include name="net/sf/regain/crawler/preparator/JacobMs*"/>
      </fileset>
    </jar>

    <jar jarfile="temp/preparator/HtmlPreparator.jar"
         compress="false" index="true">
      <manifest>
        <attribute name="Preparator-Classes" value=".HtmlPreparator"/>
      </manifest>
      <fileset dir="temp/classes">
        <include name="net/sf/regain/crawler/preparator/HtmlPreparator.*"/>
        <include name="net/sf/regain/crawler/preparator/html/**"/>
      </fileset>
    </jar>

    <jar jarfile="temp/preparator/SimpleRtfPreparator.jar"
         compress="false" index="true">
      <manifest>
        <attribute name="Preparator-Classes" value=".SimpleRtfPreparator"/>
      </manifest>
      <fileset dir="temp/classes">
        <include name="net/sf/regain/crawler/preparator/SimpleRtfPreparator.*"/>
        <include name="net/sf/regain/crawler/preparator/rtf/**"/>
      </fileset>
    </jar>

    <jar jarfile="temp/preparator/PdfBoxPreparator.jar"
         compress="false" index="true">
      <manifest>
        <attribute name="Preparator-Classes" value=".PdfBoxPreparator"/>
      </manifest>
      <fileset dir="temp/included-lib-classes/common">
        <include name="org/pdfbox/**"/>
        <include name="Resources/**"/>
      </fileset>
      <fileset dir="temp/classes">
        <include name="net/sf/regain/crawler/preparator/PdfBoxPreparator.*"/>
      </fileset>
    </jar>

    <antcall target="-simple-preparator">
      <param name="classname" value="OpenOfficePreparator"/>
    </antcall>      
    
    <antcall target="-simple-preparator">
      <param name="classname" value="PlainTextPreparator"/>
    </antcall>      

    <antcall target="-simple-preparator">
      <param name="classname" value="SwingRtfPreparator"/>
    </antcall>      

    <antcall target="-simple-preparator">
      <param name="classname" value="XmlPreparator"/>
    </antcall>      
  </target>


  <!--
   | Helper target for runtime-fast.
   |
   | Creates a simple preparator jar. A simple preparator is a preparator
   | having one class and no libs.
   +-->
  <target name="-simple-preparator" if="classname">
    <jar jarfile="temp/preparator/${classname}.jar"
         compress="false" index="true">
      <manifest>
        <attribute name="Preparator-Classes" value=".${classname}"/>
      </manifest>
      <fileset dir="temp/classes">
        <include name="net/sf/regain/crawler/preparator/${classname}.*"/>
      </fileset>
    </jar>
  </target>


  <!--
   | Creates the desktop runtime directory for fast running (without jars).
   +-->
  <target name="runtime-desktop-fast" depends="preparators">
    <copy todir="temp/runtime/desktop/win">
      <fileset dir="lib" includes="jacob.dll"/>
      <fileset dir="lib/win" includes="tray.dll"/>
    </copy>
    <copy todir="temp/runtime/desktop/linux">
      <fileset dir="lib/linux" includes="libtray.so"/>
    </copy>
    <copy todir="temp/runtime/desktop/win/conf/default">
      <fileset dir="txt" includes="DesktopConfiguration.xml"/>
      <fileset dir="txt" includes="CrawlerConfiguration.xml"/>
      <fileset dir="txt" includes="SearchConfiguration.xml"/>
      <fileset dir="txt" includes="log4j.properties"/>
    </copy>
    <copy todir="temp/runtime/desktop/linux/conf/default">
      <fileset dir="temp/runtime/desktop/win/conf/default"/>
    </copy>
    <copy todir="temp/runtime/desktop/win/web">
      <fileset dir="web/common">
        <exclude name="msg*.properties"/>
        <exclude name="**/CVS/*"/>
      </fileset>
      <fileset dir="web/desktop">
        <exclude name="msg*.properties"/>
        <exclude name="**/CVS/*"/>
      </fileset>
    </copy>
    <antcall target="-merge-messages">
      <param name="path-1" value="web/common"/>
      <param name="path-2" value="web/desktop"/>
      <param name="target" value="temp/runtime/desktop/win/web"/>
    </antcall>      
    <echo message="${version}" file="temp/runtime/desktop/win/web/version"/>
    <copy todir="temp/runtime/desktop/linux/web">
      <fileset dir="temp/runtime/desktop/win/web"/>
    </copy>
    
    <!-- Copy the preparator jars -->
    <copy todir="temp/runtime/crawler/preparator">
      <fileset dir="temp/preparator"/>
    </copy>
    <copy todir="temp/runtime/desktop/win/preparator">
      <fileset dir="temp/preparator"/>
    </copy>
    <copy todir="temp/runtime/desktop/linux/preparator">
      <fileset dir="temp/preparator">
        <exclude name="JacobMsOfficePreparators.jar"/>
      </fileset>
    </copy>
  </target>


  <!--
   | Merges the message files (msg*.properties) of two directories.
   +-->
  <target name="-merge-messages" if="target">
	  <loadfile property="msg-1" srcFile="${path-1}/msg.properties"/>
	  <loadfile property="msg-2" srcFile="${path-2}/msg.properties"/>
	  <echo file="${target}/msg.properties" message="${msg-1}${msg-2}"/>

    <loadfile property="msg_de-1" srcFile="${path-1}/msg_de.properties"/>
    <loadfile property="msg_de-2" srcFile="${path-2}/msg_de.properties"/>
    <echo file="${target}/msg_de.properties" message="${msg_de-1}${msg_de-2}"/>
  </target>


  <!--
   | Creates the server runtime directory for fast running (without jars).
   +-->
  <target name="runtime-server-fast" depends="preparators">
    <echo message="Creating the server runtime ..." />
    <mkdir dir="temp/runtime/crawler/log"/>
    <copy todir="temp/runtime/crawler">
      <fileset dir="lib" includes="jacob.dll"/>
      <fileset dir="txt" includes="CrawlerConfiguration.xml"/>
      <fileset dir="txt" includes="log4j.properties"/>
    </copy>

    <mkdir dir="temp/runtime/search/conf/regain"/>
    <copy todir="temp/runtime/search/conf/regain">
      <fileset dir="txt" includes="SearchConfiguration.xml"/>
    </copy>

    <!-- Copy the preparator jars -->
    <copy todir="temp/runtime/crawler/preparator">
      <fileset dir="temp/preparator"/>
    </copy>
  </target>


  <!--
   | Creates the runtime directory for fast running (without jars).
   +-->
  <target name="runtime-fast" depends="runtime-desktop-fast, runtime-server-fast"/>


  <!--
   | Creates the desktop runtime directory.
   +-->
  <target name="runtime-desktop" depends="prepare-once, runtime-desktop-fast">
    <echo message="Creating the jars ..." />
    <fileset id="desktop-common-jars" dir="temp/included-lib-classes/common">
      <include name="org/apache/lucene/**"/>
      <include name="org/apache/log4j/**"/>
      <include name="org/apache/regexp/**"/>
    
      <!-- XML stuff -->
      <include name="javax/xml/**"/>
      <include name="org/w3c/dom/**"/>
      <include name="org/apache/xerces/**"/>
      <include name="org/xml/sax/**"/>

      <!-- desktop specific stuff -->
      <include name="simple/**"/>
    </fileset>
    <fileset id="desktop-common-classes" dir="temp/classes">
      <exclude name="net/sf/regain/crawler/preparator/**"/>
      <exclude name="net/sf/regain/ui/server/**"/>
      <exclude name="net/sf/regain/util/sharedtag/taglib/**"/>
    </fileset>
    
    <jar jarfile="temp/runtime/desktop/win/${programname.file}.jar"
         compress="false"
         index="true">
      <manifest>
        <attribute name="Main-Class" value="net.sf.regain.ui.desktop.Main"/>
      </manifest>
      <fileset refid="desktop-common-jars"/>
      <fileset refid="desktop-common-classes"/>
      <fileset dir="temp/included-lib-classes/win">
        <include name="org/jdesktop/jdic/init/**"/>
        <include name="org/jdesktop/jdic/tray/**"/>
      </fileset>
    </jar>
    <jar jarfile="temp/runtime/desktop/linux/${programname.file}.jar"
         compress="false"
         index="true">
      <manifest>
        <attribute name="Main-Class" value="net.sf.regain.ui.desktop.Main"/>
      </manifest>
      <fileset refid="desktop-common-jars"/>
      <fileset refid="desktop-common-classes"/>
      <!--
      <fileset dir="temp/included-lib-classes/linux">
        <include name="org/jdesktop/jdic/init/**"/>
        <include name="org/jdesktop/jdic/tray/**"/>
      </fileset>
      -->
    </jar>
  </target>


  <!--
   | Creates files that are included in the regain.war.
   +-->
  <target name="-web-temps">
	  <mkdir dir="temp/web-temps"/>
	  <antcall target="-merge-messages">
	    <param name="path-1" value="web/common"/>
	    <param name="path-2" value="web/server"/>
	    <param name="target" value="temp/web-temps"/>
	  </antcall>
    <echo message="${version}" file="temp/web-temps/version"/>
  </target>


  <!--
   | Creates the server runtime directory.
   +-->
  <target name="runtime-server" depends="prepare-once, runtime-server-fast, -web-temps">
    <jar jarfile="temp/runtime/crawler/${programname.file}-crawler.jar"
         compress="false"
         index="true">
      <manifest>
        <attribute name="Main-Class" value="net.sf.regain.crawler.Main"/>
      </manifest>
      <fileset dir="temp/included-lib-classes/common">
        <include name="org/apache/lucene/**"/>
        <include name="org/apache/log4j/**"/>
        <include name="org/apache/regexp/**"/>

        <!-- XML stuff -->
        <include name="javax/xml/**"/>
        <include name="org/w3c/dom/**"/>
        <include name="org/apache/xerces/**"/>
        <include name="org/xml/sax/**"/>
      </fileset>
      <fileset dir="temp/classes">
        <include name="net/sf/regain/*.class"/>
        <include name="net/sf/regain/crawler/**"/>
        <exclude name="net/sf/regain/crawler/preparator/**"/>
      </fileset>
    </jar>
    
    <mkdir dir="temp/runtime/search/webapps"/>
    <war destfile="temp/runtime/search/webapps/${programname.file}.war"
         webxml="web/server/web-inf/web.xml">
      <classes dir="temp/classes">
        <exclude name="net/sf/regain/crawler/**"/>
        <exclude name="net/sf/regain/ui/desktop/**"/>
        <exclude name="net/sf/regain/util/sharedtag/simple/**"/>
        <exclude name="net/sf/regain/util/ui/**"/>
      </classes>
      <lib dir="lib">
        <include name="${lucene.jar}"/>
        <include name="${regexp.jar}"/>
        <include name="${log4j.jar}"/>
      </lib>
	    <fileset dir="web/common">
	      <exclude name="msg*.properties"/>
	      <exclude name="**/CVS/*"/>
	    </fileset>
	    <fileset dir="web/server">
        <exclude name="web-inf"/>
        <exclude name="web-inf/**"/>
	      <exclude name="msg*.properties"/>
	      <exclude name="**/CVS/*"/>
	    </fileset>
      <fileset dir="temp/web-temps"/>
    </war>
  </target>


  <!--
   | Creates the runtime directory.
   +-->
  <target name="runtime" depends="runtime-desktop, runtime-server">
  </target>


  <!--
   | Creates a windows executable using Jsmooth
   +-->
  <taskdef name="jsmoothgen" 
     classname="net.charabia.jsmoothgen.ant.JSmoothGen" 
     classpath="jsmooth/lib/jsmoothgen-ant.jar"/> 


  <!--
   | Creates a windows executable using Jsmooth
   +-->
  <target name="jsmoothgen" depends="clean-all, runtime">
    <echo message="Creating the exe file ..." />
    <jsmoothgen project="jsmooth/exe-creation.jsmooth" skeletonroot="jsmooth/skeletons"/> 
  </target>


  <!--
   | Creates a Windows installer for the project.
   +-->
  <target name="installer" depends="jsmoothgen">
    <mkdir dir="temp/public"/>
    <exec executable="installer/makensis.exe"
          failonerror="true">
      <arg value="/NOCD"/>
      <arg value="/DVERSION=${version}"/>
      <arg value="/DVERSION_FILE=${version.file}"/>
      <arg value="/DPROG_NAME=${programname}"/>
      <arg value="/DPROG_NAME_FILE=${programname.file}"/>
      <arg value="/DRUNTIME_DIR=temp\runtime\desktop"/>
      <arg value="/DINSTALLER_DIR=installer"/>
      <arg value="/DPUBLIC_DIR=temp\public"/>
      <arg value="/DLANGUAGE_FILE=installer\German.nlf"/>
      <arg value="/DBASICS_DIR=installer\Basics"/>
      <arg value="installer\regain.nsi"/>
    </exec>
  </target>


  <!--
   | Tests the project.
   +-->
  <target name="test" depends="make-test, runtime-fast">
    <delete dir="temp/test/docs"/>
    <mkdir dir="temp/test/docs"/>
    
    <java classname="net.sf.regain.test.PreparatorTest"
          dir="temp/runtime/crawler"
          fork="true">
      <arg value="../../../test/docs"/>
      <arg value="../../test/docs"/>
      <classpath>
        <fileset dir="lib">
          <include name="*.jar"/>
        </fileset>
        <pathelement path="temp/classes"/>
      </classpath>      
    </java>
  </target>

  

  <!--
   | Runs the project.
   +-->
  <target name="run-crawler" depends="runtime">
    <java jar="temp/runtime/crawler/${programname.file}.jar"
          dir="temp/runtime/crawler"
          fork="true">
          <!--
          jvm="${java-1_2_2.dir}/bin/java"
          -->
    </java>
  </target>


  <!--
   | Runs the project.
   +-->
  <target name="run-crawler-fast" depends="runtime-fast">
    <java classname="net.sf.regain.crawler.Main"
          dir="temp/runtime/crawler"
          fork="true">
          <!--
          jvm="${java-1_2_2.dir}/bin/java"
          -->
      <jvmarg value="-Xmx256M"/>
      <classpath>
        <path refid="classpath"/>
      </classpath>
    </java>
  </target>


  <!--
   | Runs the project.
   +-->
  <target name="run-desktop-fast" depends="runtime-fast">
    <java classname="net.sf.regain.ui.desktop.Main"
          dir="temp/runtime/desktop/${platform}"
          fork="true">
          <!--
          jvm="${java-1_2_2.dir}/bin/java"
          -->
      <jvmarg value="-Djava.library.path=."/>
      <jvmarg value="-Xmx256M"/>
      <classpath>
        <path refid="classpath"/>
      </classpath>
    </java>
  </target>


  <!--
   | Creates all the stuff that can be downloaded.
   |
   | This target depends on clean-runtime to be sure that the runtime
   | directory contains no stuff we don't want to be destributed.
   +-->
  <target name="public" depends="clean-all, runtime, doc">
    <mkdir dir="temp/public"/>

    <zip destfile="temp/public/${programname.file}_v${version}_server.zip">
      <zipfileset prefix="${programname.file}/runtime/crawler"
                  dir="temp/runtime/crawler"/>
      <zipfileset prefix="${programname.file}/runtime/search"
                  dir="temp/runtime/search"/>
      <zipfileset prefix="${programname.file}"
                  dir="txt">
        <include name="license.txt"/>
        <include name="WhatIsNew.txt"/>
        <include name="WasIstNeu.txt"/>
      </zipfileset>
    </zip>

    <zip destfile="temp/public/${programname.file}_v${version}_desktop_win.zip">
      <zipfileset prefix="${programname.file}/"
                  dir="temp/runtime/desktop/win"/>
      <zipfileset prefix="${programname.file}"
                  dir="txt">
        <include name="license.txt"/>
        <include name="WhatIsNew.txt"/>
        <include name="WasIstNeu.txt"/>
      </zipfileset>
    </zip>

    <zip destfile="temp/public/${programname.file}_v${version}_desktop_linux.zip">
      <zipfileset prefix="${programname.file}/"
                  dir="temp/runtime/desktop/linux"/>
      <zipfileset prefix="${programname.file}"
                  dir="txt">
        <include name="license.txt"/>
        <include name="WhatIsNew.txt"/>
        <include name="WasIstNeu.txt"/>
      </zipfileset>
    </zip>
    
    <zip destfile="temp/public/${programname.file}_v${version}_doc.zip">
      <zipfileset prefix="${programname.file}/doc"
                  dir="temp/doc"/>
    </zip>

    <zip destfile="temp/public/${programname.file}_v${version}_src.zip">
      <zipfileset prefix="${programname.file}"
                  dir="">
        <exclude name="**/*.bak"/>
        <exclude name="**/*~"/>
        <exclude name="temp/**"/>
        <exclude name="jacobgen/generated-src/**"/>
        <exclude name="jacobgen/*.olb"/>
        <exclude name="src/**/.*"/>
        <exclude name="txt/*.pdf"/>
      </zipfileset>
      <zipfileset prefix="${programname.file}"
                  dir="txt"
                  includes="license.txt"/>
    </zip>
  </target>


  <!--
   | Deploys the war file at the servlet engine.
   +-->
  <target name="deploy-war" depends="runtime, clean-web">
    <echo message="Deploying the war file at ${deploy-target.dir}...." />
    <copy todir="${deploy-target.dir}">
      <fileset dir="temp/runtime" includes="${programname.file}.war"/>
    </copy>
  </target>


  <!--
   | Deploys the web content at the servlet engine.
   +-->
  <target name="deploy-web" depends="-web-temps">
    <!--
     | NOTE: We create the WEB-INF directory too, to ensure that it is written
     |       in uppercase. Otherwise tomcat will complain.
     +-->
    <mkdir dir="${deploy-target.dir}/${programname.file}/WEB-INF"/>
    <echo message="Deploying the web content at ${deploy-target.dir}/${programname.file}" />
    <copy todir="${deploy-target.dir}/${programname.file}/WEB-INF"
          file="web/server/web-inf/web.xml"/>
    <copy todir="${deploy-target.dir}/${programname.file}">
      <fileset dir="web/common">
        <exclude name="msg*.properties"/>
        <exclude name="**/CVS/*"/>
      </fileset>
      <fileset dir="web/server">
        <exclude name="web-inf"/>
        <exclude name="web-inf/**"/>
        <exclude name="msg*.properties"/>
        <exclude name="**/CVS/*"/>
      </fileset>
      <fileset dir="temp/web-temps"/>
    </copy>
    <echo message="${version}" file="${deploy-target.dir}/${programname.file}/version"/>
  </target>


  <!--
   | Deploys the classes and libs at the servlet engine.
   +-->
  <target name="deploy-classes" depends="make">
    <mkdir dir="${deploy-target.dir}/${programname.file}/WEB-INF/classes"/>
    <copy todir="${deploy-target.dir}/${programname.file}/WEB-INF/classes">
      <fileset dir="temp/classes">
        <exclude name="net/sf/regain/crawler/**"/>
        <exclude name="net/sf/regain/ui/desktop/**"/>
        <exclude name="net/sf/regain/util/sharedtag/simple/**"/>
        <exclude name="net/sf/regain/util/ui/**"/>
      </fileset>
    </copy>

    <mkdir dir="${deploy-target.dir}/${programname.file}/WEB-INF/lib"/>
	<copy todir="${deploy-target.dir}/${programname.file}/WEB-INF/lib">
	  <fileset dir="lib">
	    <include name="${lucene.jar}"/>
	    <include name="${regexp.jar}"/>
      <include name="${log4j.jar}"/>
	  </fileset>
	</copy>
  </target>

  
  <!--
   | Deploys the config at the servlet engine.
   +-->
  <target name="deploy-config">
    <mkdir dir="${deploy-target.dir}/../conf/regain"/>
    <copy todir="${deploy-target.dir}/../conf/regain">
      <fileset dir="txt">
        <include name="SearchConfiguration.xml"/>
      </fileset>
    </copy>
  </target>
  

  <!--
   | Creates all.
   +-->
  <target name="all" depends="public">
  </target>



  <!--
   | Compiles the source code generated by jacobgen.
   +-->
  <target name="make-jacobgen">
    <echo message="Compiling the generated source code ..." />
    <mkdir dir="${jacobgen-classes.dir}"/>
    <javac srcdir="${jacobgen-src.dir}"
           destdir="${jacobgen-classes.dir}"
           target="1.2"
           debug="${debug}"
           deprecation="true">
      <classpath>
        <path refid="jacobgen-classpath"/>
      </classpath>
    </javac>
  </target>



  <!--
   | Packs a zip file containing the generated jacobgen source
   | and a jar file containing the classes.
   +-->
  <target name="pack-jacobgen" depends="make-jacobgen">
    <echo message="Packing the jars ..." />
    <mkdir dir="${jacobgen-packed.dir}"/>
    <zip destfile="${jacobgen-packed.dir}/jacobgen-msoffice2000_src.zip">
      <zipfileset prefix="${programname.file}/jacobgen/generated-src"
                  dir="${jacobgen-src.dir}">
      </zipfileset>
    </zip>
    <jar jarfile="${jacobgen-packed.dir}/jacobgen-msoffice2000.jar"
         index="true"
         basedir="${jacobgen-classes.dir}"/>
  </target>

</project>
