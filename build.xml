<?xml version="1.0"?>
<!--
 | regain - A file search engine providing plenty of formats
 | Copyright (C) 2004  Til Schneider
 | 
 | This library is free software; you can redistribute it and/or
 | modify it under the terms of the GNU Lesser General Public
 | License as published by the Free Software Foundation; either
 | version 2.1 of the License, or (at your option) any later version.
 | 
 | This library is distributed in the hope that it will be useful,
 | but WITHOUT ANY WARRANTY; without even the implied warranty of
 | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 | Lesser General Public License for more details.
 | 
 | You should have received a copy of the GNU Lesser General Public
 | License along with this library; if not, write to the Free Software
 | Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 | 
 | Contact: Til Schneider, info@murfman.de
 |
 | CVS information:
 |  $RCSfile$
 |   $Source$
 |     $Date$
 |   $Author$
 | $Revision$
 |
 | Author: Til Schneider, www.murfman.de
 +-->
<project name="regain" default="targets" basedir=".">

  <!--
   | The properties and paths
   +-->
  <property file="build.properties"/>
  <property environment="env"/>

  <property name="version.file" value="${version}"/>
  <property name="programname" value="Regain"/>
  <property name="programname.file" value="regain"/>

  <property name="doc.header" value="${programname} ${version} API"/>
  <property name="doc.title" value="API documentation for ${programname} ${version}"/>
  <property name="doc.bottom" value="${programname} ${version}, Copyright (C) 2004 Til Schneider, www.murfman.de"/>

  <property name="jacobgen-src.dir" value="temp/jacobgen/generated-src"/>
  <property name="jacobgen-classes.dir" value="temp/jacobgen/classes"/>
  <property name="jacobgen-packed.dir" value="jacobgen/packed"/>
  <property name="package-lists.dir" value="txt/package-lists"/>
  
  <property name="lucene.jar" value="lucene-1.4.2.jar"/>
  <property name="regexp.jar" value="jakarta-regexp-1.3.jar"/>

  <path id="sourcepath">
    <pathelement location="src"/>
  </path>

  <path id="classpath">
    <pathelement location="temp/classes"/>
    <fileset dir="lib">
      <include name="*.jar"/>
    </fileset>
  </path>

  <path id="jacobgen-classpath">
    <pathelement location="temp/classes"/>
    <fileset dir="lib">
      <include name="jacob.jar"/>
    </fileset>
  </path>

  <path id="docpath">
    <path refid="sourcepath"/>
  </path>



  <!--
   | Display all public targets
   +-->
  <target name="targets">
    <echo message="usage: build [target]"/>
    <echo message=""/>
    <echo message="available targets:"/>
    <echo message="  targets       Shows this list of targets."/>
    <echo message="  dump-info     Dumps some information (VM-Version...)."/>
    <echo message="  clean         Deletes the classes directory."/>
    <echo message="  clean-runtime Deletes the runtime directory."/>
    <echo message="  clean-all     Deletes all generated directories."/>
    <echo message="                (Without public and the deployed stuff)"/>
    <echo message="  clean-web     Deletes the deployed stuff (Without the config)."/>
    <echo message="  prepare       Prepares the compilation. (Extracts the libs)"/>
    <echo message="  doc           Generates the JavaDoc documentation."/>
    <echo message="  make          Compiles the source code."/>
    <echo message="  make-jacobgen Compiles the source code generated by jacobgen"/>
    <echo message="  pack-jacobgen Packs a zip file containing the generated jacobgen source"/>
    <echo message="                and a jar file containing the classes."/>
    <echo message="  runtime       Prepares the runtime directory."/>
    <echo message="  fast-runtime  Prepares the runtime directory without the jars."/>
    <echo message="  run           Runs the project."/>
    <echo message="  fast-run      Runs the project without building the jars."/>
    <echo message="  public        Creates all the stuff that can be downloaded."/>
    <echo message="  deploy-war    Deploys the war file at the servlet engine."/>
    <echo message="  all           Creates all (Same as public)."/>
  </target>



  <!--
   | Dump some information.
   +-->
  <target name="dump-info">
    <echo message="JAVA_HOME=${env.JAVA_HOME}" />
    <echo message="java.vm.info=${java.vm.info}" />
    <echo message="java.vm.name=${java.vm.name}" />
    <echo message="java.vm.vendor=${java.vm.vendor}" />
    <echo message="java.vm.version=${java.vm.version}" />
    <echo message="os.arch=${os.arch}" />
    <echo message="os.name=${os.name}" />
    <echo message="os.version=${os.version}" />
    <echo message="file.encoding=${file.encoding}" />
    <echo message="user.language=${user.language}" />
  </target>



  <!--
   | Deletes the classes directory.
   +-->
  <target name="clean">
    <delete dir="temp/classes"/>
  </target>


  <!--
   | Deletes the runtime directory
   +-->
  <target name="clean-runtime">
    <delete dir="temp/runtime"/>
  </target>


  <!--
   | Deletes all generated directories (Without public and the deployed stuff).
   +-->
  <target name="clean-all" depends="clean, clean-runtime">
    <delete dir="temp/included-lib-classes"/>
    <delete dir="temp/doc"/>
  </target>


  <!--
   | Deletes the deployed stuff (Without the config).
   +-->
  <target name="clean-web">
    <echo message="Deleting the deployed stuff from ${deploy-target.dir}"/>
    <delete dir="${deploy-target.dir}/${programname.file}"/>
    <delete file="${deploy-target.dir}/${programname.file}.war"/>
  </target>


  <!--
   | Prepares the compilation. (Extracts the libs)
   +-->
  <target name="prepare">
    <echo message="Extracting the lib jars ..." />
    <delete dir="temp/included-lib-classes"/>
    <mkdir dir="temp/included-lib-classes"/>
    <unjar dest="temp/included-lib-classes">
      <fileset dir="lib">
        <include name="*.jar"/>
      </fileset>
    </unjar>
  </target>
    


  <!--
   | Generates the JavaDoc documentation.
   +-->
  <target name="doc">
    <echo message="Generating JavaDoc documentation ..." />
    <delete dir="temp/doc"/>
    <mkdir dir="temp/doc"/>
    <javadoc packagenames="*"
             sourcepathref="docpath"
             classpathref="classpath"
             destdir="temp/doc"
             doctitle="${doc.title}"
             windowtitle="${doc.title}"
             header="${doc.header}"
             bottom="${doc.bottom}"
             stylesheetfile="txt/stylesheet.css"
             access="private"
             charset="ISO-8859-1"
             failonerror="true">
             <!-- additionalparam="-breakiterator" -->
      <link offline="true"
            href="${java-api-location}"
            packagelistLoc="txt/dummy-jdk-api-doc"/>
    </javadoc>
  </target>



  <!--
   | Compiles the source code.
   +-->
  <target name="make">
    <echo message="Compiling the source code ..." />
    <mkdir dir="temp/classes"/>
    <javac destdir="temp/classes"
           debug="${debug}"
           deprecation="true"
           target="1.2">
           <!--
           executable="${java-1_2_2.dir}/bin/javac"
           fork="true">
           -->
      <src>
        <path refid="sourcepath"/>
      </src>
      <classpath>
        <path refid="classpath"/>
      </classpath>
    </javac>

    <copy todir="temp/classes">
      <fileset dir="src" includes="**/*.gif"/>
      <fileset dir="src" includes="**/*.jpg"/>
      <fileset dir="src" includes="**/*.dtd"/>
      <fileset dir="src" includes="**/*.properties"/>
    </copy>
  </target>


  <!--
   | Compiles the source code.
   +-->
  <target name="make-test" depends="make">
    <echo message="Compiling the test source code ..." />
    <mkdir dir="temp/classes"/>
    <javac destdir="temp/classes"
           debug="${debug}"
           deprecation="true"
           target="1.2">
      <src>
        <pathelement location="test/src"/>
      </src>
      <classpath>
        <path refid="classpath"/>
      </classpath>
    </javac>
  </target>

  
  
  <!--
   | Creates the runtime directory for fast running (without jars).
   +-->
  <target name="fast-runtime" depends="make">
    <echo message="Creating the runtime ..." />
    <mkdir dir="temp/runtime"/>
    <copy todir="temp/runtime">
      <fileset dir="txt" includes="license.txt"/>
    </copy>

    <mkdir dir="temp/runtime/crawler/log"/>
    <copy todir="temp/runtime/crawler">
      <fileset dir="lib" includes="jacob.dll"/>
      <fileset dir="txt" includes="CrawlerConfiguration.xml"/>
      <fileset dir="txt" includes="log4j.properties"/>
    </copy>

    <mkdir dir="temp/runtime/search/conf/regain"/>
    <copy todir="temp/runtime/search/conf/regain">
      <fileset dir="txt" includes="SearchConfiguration.xml"/>
    </copy>
  </target>



  <!--
   | Creates the runtime directory.
   +-->
  <target name="runtime" depends="fast-runtime, prepare">
    <echo message="Creating the jars ..." />

    <jar jarfile="temp/runtime/crawler/${programname.file}.jar"
         compress="false"
         index="true">
      <manifest>
        <attribute name="Main-Class" value="net.sf.regain.crawler.Main"/>
      </manifest>
      <fileset dir="temp/included-lib-classes">
        <exclude name="*"/>
        <exclude name="META-INF/**"/>
        <exclude name="license/**"/>
        <exclude name="test/**"/>
      </fileset>
      <fileset dir="temp/classes">
        <exclude name="net/sf/regain/search/**"/>
      </fileset>
    </jar>

    <mkdir dir="temp/runtime/search/webapps"/>
    <war destfile="temp/runtime/search/webapps/${programname.file}.war"
         webxml="web/Web-inf/web.xml">
      <classes dir="temp/classes">
        <exclude name="net/sf/regain/crawler/**"/>
      </classes>
      <lib dir="lib">
        <include name="${lucene.jar}"/>
        <include name="${regexp.jar}"/>
      </lib>
      <fileset dir="web" includes="*.jsp"/>
      <fileset dir="web" includes="*.tld"/>
    </war>
  </target>


  
  <!--
   | Tests the project.
   +-->
  <target name="test" depends="make-test, fast-runtime">
    <delete dir="temp/test/docs"/>
    <mkdir dir="temp/test/docs"/>
    
    <java classname="net.sf.regain.test.PreparatorTest"
          dir="temp/runtime"
          fork="true">
      <arg value="../../test/docs"/>
      <arg value="../test/docs"/>
      <classpath>
        <fileset dir="lib">
          <include name="*.jar"/>
        </fileset>
        <pathelement path="temp/classes"/>
      </classpath>      
    </java>
  </target>

  

  <!--
   | Runs the project.
   +-->
  <target name="run" depends="runtime">
    <java jar="temp/runtime/crawler/${programname.file}.jar"
          dir="temp/runtime/crawler"
          fork="true">
          <!--
          jvm="${java-1_2_2.dir}/bin/java"
          -->
    </java>
  </target>



  <!--
   | Runs the project.
   +-->
  <target name="fast-run" depends="fast-runtime">
    <java classname="net.sf.regain.crawler.Main"
          dir="temp/runtime/crawler"
          fork="true">
          <!--
          jvm="${java-1_2_2.dir}/bin/java"
          -->
      <classpath>
        <path refid="classpath"/>
      </classpath>
    </java>
  </target>



  <!--
   | Creates all the stuff that can be downloaded.
   |
   | This target depends on clean-runtime to be sure that the runtime
   | directory contains no stuff we don't want to be destributed.
   +-->
  <target name="public" depends="clean-all, prepare, runtime, doc">
    <mkdir dir="temp/public"/>

    <zip destfile="temp/public/${programname.file}_v${version}_bin.zip">
      <zipfileset prefix="${programname.file}_v${version}/runtime"
                  dir="temp/runtime"/>
      <zipfileset prefix="${programname.file}_v${version}/txt"
                  dir="txt">
        <include name="*.pdf*"/>
      </zipfileset>
    </zip>

    <zip destfile="temp/public/${programname.file}_v${version}_doc.zip">
      <zipfileset prefix="${programname.file}_v${version}/doc"
                  dir="temp/doc"/>
    </zip>

    <zip destfile="temp/public/${programname.file}_v${version}_src.zip">
      <zipfileset prefix="${programname.file}_v${version}"
                  dir="">
        <include name="build.cmd"/>
        <include name="build.properties"/>
        <include name="build.xml"/>
      </zipfileset>
      <zipfileset prefix="${programname.file}_v${version}/lib"
                  dir="lib">
        <include name="*.jar"/>
        <include name="*.dll"/>
      </zipfileset>
      <zipfileset prefix="${programname.file}_v${version}/src"
                  dir="src">
        <exclude name="**/.*"/>
        <exclude name="**~"/>
      </zipfileset>
      <zipfileset prefix="${programname.file}_v${version}/txt"
                  dir="txt">
        <exclude name="*.pdf*"/>
      </zipfileset>
      <zipfileset prefix="${programname.file}_v${version}/web"
                  dir="web"/>
      <zipfileset prefix="${programname.file}_v${version}/jacobgen"
                  dir="jacobgen">
        <exclude name="generated-src/**"/>
        <exclude name="temp/classes/**"/>
        <exclude name="*.olb"/>
      </zipfileset>
      <zipfileset prefix="${programname.file}_v${version}"
                  dir="txt"
                  includes="license.txt"/>
    </zip>
  </target>


  <!--
   | Deploys the war file at the servlet engine.
   +-->
  <target name="deploy-war" depends="runtime, clean-web">
    <echo message="Deploying the war file at ${deploy-target.dir}...." />
    <copy todir="${deploy-target.dir}">
      <fileset dir="temp/runtime" includes="${programname.file}.war"/>
    </copy>
  </target>


  <!--
   | Deploys the web content at the servlet engine.
   +-->
  <target name="deploy-web">
    <!--
     | NOTE: We create the WEB-INF directory too, to ensure that it is written
     |       in uppercase. Otherwise tomcat will complain.
     +-->
    <mkdir dir="${deploy-target.dir}/${programname.file}/WEB-INF"/>

    <echo message="Deploying the web content at ${deploy-target.dir}/${programname.file}" />
    <copy todir="${deploy-target.dir}/${programname.file}">
      <fileset dir="web">
        <include name="**"/>
        <exclude name="**/CVS/*"/>
      </fileset>
    </copy>
  </target>


  <!--
   | Deploys the classes and libs at the servlet engine.
   +-->
  <target name="deploy-classes" depends="make">
    <mkdir dir="${deploy-target.dir}/${programname.file}/WEB-INF/classes"/>
    <copy todir="${deploy-target.dir}/${programname.file}/WEB-INF/classes">
      <fileset dir="temp/classes">
        <exclude name="net/sf/regain/crawler/**"/>
      </fileset>
    </copy>

    <mkdir dir="${deploy-target.dir}/${programname.file}/WEB-INF/lib"/>
	<copy todir="${deploy-target.dir}/${programname.file}/WEB-INF/lib">
	  <fileset dir="lib">
	    <include name="${lucene.jar}"/>
	    <include name="${regexp.jar}"/>
	  </fileset>
	</copy>
  </target>

  
  <!--
   | Deploys the config at the servlet engine.
   +-->
  <target name="deploy-config">
    <mkdir dir="${deploy-target.dir}/../conf/regain"/>
    <copy todir="${deploy-target.dir}/../conf/regain">
      <fileset dir="txt">
        <include name="SearchConfiguration.xml"/>
      </fileset>
    </copy>
  </target>
  

  <!--
   | Creates all.
   +-->
  <target name="all" depends="public">
  </target>



  <!--
   | Compiles the source code generated by jacobgen.
   +-->
  <target name="make-jacobgen">
    <echo message="Compiling the generated source code ..." />
    <mkdir dir="${jacobgen-classes.dir}"/>
    <javac srcdir="${jacobgen-src.dir}"
           destdir="${jacobgen-classes.dir}"
           target="1.2"
           debug="${debug}"
           deprecation="true">
      <classpath>
        <path refid="jacobgen-classpath"/>
      </classpath>
    </javac>
  </target>



  <!--
   | Packs a zip file containing the generated jacobgen source
   | and a jar file containing the classes.
   +-->
  <target name="pack-jacobgen" depends="make-jacobgen">
    <echo message="Packing the jars ..." />
    <mkdir dir="${jacobgen-packed.dir}"/>
    <zip destfile="${jacobgen-packed.dir}/jacobgen-msoffice2000_src.zip">
      <zipfileset prefix="${programname.file}_v${version}/jacobgen/generated-src"
                  dir="${jacobgen-src.dir}">
      </zipfileset>
    </zip>
    <jar jarfile="${jacobgen-packed.dir}/jacobgen-msoffice2000.jar"
         index="true"
         basedir="${jacobgen-classes.dir}"/>
  </target>

</project>
