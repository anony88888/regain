X Aktualisierung auf die neusten Versionen der genutzten Projekte, sofern
    Ergebnis dadurch nicht schlechter wird. (Aufwand: 8 Std.)
    Updates:
      jakarta regexp: 1.2 -> 1.3
      jakarta log4j: 1.1.3 -> 1.2.9
      jakarta lucene: 1.3 -> 1.4.2
      xerces-j: ? -> 2.6.2
      pdfBox: 0.6.4 -> 0.6.7
      Jakarta POI: 2.0 RC 2 -> 2.5.1
      jacob: 1.7 -> 1.8 (neue Webseite: http://sourceforge.net/projects/jacob-project/)
    Unterschiede:
      jacob: Läuft jetzt auch mit Java 1.4
      JacobMsExcelPreparator:
        Stabilität: Führte früher zu Absturz der VM. Jetzt keine Probleme.
        Geschwindigkeit: 5,00 sec für 27,50 kB
        Qualität: Es werden nicht alle Spalten ausgelesen.
      JacobMsPowerPointPreparator:
        Stabilität: Unverändert: Keine Probleme bekannt
        Geschwindigkeit: Unverändert: Für 820,50 kB: 7,07 sec -> 7,53 sec
        Qualität: Unverändert: Keine Probleme bekannt
      JacobMsWordPreparator:
        Stabilität: Unverändert: Keine Probleme bekannt
        Geschwindigkeit: Unverändert: Für 3,59 MB: 36,34 sec -> 37,98 sec
        Qualität: Unverändert: Keine Probleme bekannt
      PdfPreparator:
        Stabilität: Unverändert: Keine Probleme bekannt
        Geschwindigkeit: Faktor 4 langsamer: Für 674,44 kB: 13,69 sec -> 1:06 min
                                                   2. Test: 13,43 sec -> 1:07 min
        Qualität: Besser: Es wird mehr erkannt. Probleme mit Umlauten aus Latex (M¨oglichkeit)
      PoiMsExcelPreparator:
        Stabilität: Unverändert: Keine Probleme bekannt
        Geschwindigkeit: Unverändert: Für 27,50 kB: 1,27 sec -> 1,91 sec
        Qualität: Unverändert: Keine Probleme bekannt
      PoiMsWordPreparator:
        Stabilität: Unverändert: 2 von 5 Dokumenten brechen ab.
        Geschwindigkeit: Unverändert: Für 3,39 MB: 1,02 sec -> 1,11 sec
        Qualität: Unverändert: Vergleichbar mit JacobMsWordPreparator
X Word-Preperator: Öffnen und Schließen von Word loggen
X Parameter für Präperatoren: (Aufwand: 4 Std.)
    Präperatoren sollen in der Konfiguration parametrisierbar werden. Diese
    Parameter sollen optional in extra Datei ausgelagert werden können.
X Jacob-Präperatoren nicht mehr als Default nutzen.
X Suchmaske: Konfiguration in externe XML-Datei auslagern
    (Nicht mehr in web.xml)
X Suchmaske: URL-Rewriting: Z.B. Indizierung von file://someserver/bla/blubb/...,
    jedoch Anzeige im Browser mit http://intranet/blubb/... (Aufwand: 4 Std.)
X Zusatz-Index-Felder aus Dokument-URL generieren. (Aufwand: 4 Std.)
    Z.B. bei URL "file://var/sicherung/dk100/..." Feld "system" mit Wert "dk100" indexieren.
    Oder bei "file://blubb/projects/Otto13/..." Feld "project" mit Wert "Otto13".
X Suchemaske: Expertensuche: (Aufwand: 4 Std.)
    Zusätzliche Eingabefelder für bestimmte Suchfelder ermöglichen. Die Werte
    diese Felder dann mit "field:value" an Suchstring anhängen.
X Prüfen: Können die im Index enthaltenen Werte (distinct values) der
    Suchfelder in der erweiterten Suchmaske als Auswahlmöglichkeit angeboten
    werden? (für Expertensuche mit ComboBoxes) (Aufwand: 4 Std.)
    Ergebnis: Es ist machbar. (Mit IndexReader.terms())
X Handbuch aktualisieren:
    - Neue Versionen der abhängigen Projekte
    - Parameter für Präperatoren (contentExtractor und pathExtractor "verschoben")
    - Suchmaske wird nun über XML Datei konfiguriert (wo die liegt, steht in web.xml)
    - Config Suchmaske: URL-Rewriting
X Word-Preperator: Berücksichtigungen von Formatvorlagen bei der Indizierung
    von Word-Dokumenten. (Aufwand: max. 4 Std., wenn mehr Rücksprache)
    Text aus Abschnitten, die bestimmte Formatvorlagen nutzen bei der Suche
    stärker gewichten (z.B. Überschriften). Die Namen der Formatvorlagen
    kommen aus der Konfiguration.
X Handbuch aktualisieren:
    - Config Crawler: Zusatzfelder aus Pfad generieren
    - Installations- und Konfigurationsbeschreibung der Suchmaske überarbeitet,
      so dass der Umgang mit der SearchConfiguration.xml erklärt wird.
X SharedTags: Die selben Tags für Taglib-Technologie und simpleweb-Technologie
    nutzen.
X SharedTags: JSP-Parser für simpleweb
X DesktopSuche: Such-JSPs unter simpleweb zum Laufen bekommen.
X Desktopsuche: Einstellungen
    - Wie oft soll er aktualisiert werden
    - Welche Verzeichnisse sollen indiziert werden sollen
    - Welche Verzeichnisse sollen ausgelassen werden
    - Welche Webseiten sollen indiziert werden
X Desktopsuche: Periodisch den Crawler aufrufen und automatisch geänderte
    Konfiguration laden
X Desktopsuche: Task-Icon mit Menü
X Desktopsuche: Exe creation with jsmooth
X Desktopsuche: Installer
X Desktopsuche: Besseres Seiten-Design
X Desktopsuche: Willkommensseite anzeigen, wenn keine Start-URLs definiert sind.
X Desktopsuche: file-Treffer über http bereitstellen
X Bug: Indexierung von Webseiten geht nicht
X Desktopsuche: FileService: Mime-Types setzen
X Desktopsuche: Status
    - Wann wurde der Index zuletzt aktualisiert
    - Fortschritt bei laufender Aktualisierung
X Desktopsuche: search.jsp:
    - Forward zu noindex.jsp, wenn kein Index vorhanden.
    - Forward zu searchinput.jsp, wenn query nicht gesetzt.
X Desktopsuche: Links zu den anderen Seiten im Footer-Bereich
X Änderungen für die Desktopsuche in Server-Variante übernehmen
X Jacob-Präperatoren: Indizierung der Office-Dokumenten-Beschreibungs-Felder.
    Dazu Preparator-Schnittstelle erweitern um: Map getAdditionalFields()
    Folgende Felder extrahieren: Möglichst alles aus Eigenschaften/Zusammenfassung
    Einstellbar, welche Felder aufgenommen werden sollen.
X Expertensuche: Tag für Combobox, die distinct values eines Feldes beinhaltet.
X Neues Feld: extension: Dateiendung indexieren.
X Internationalisierung und Lokalisierung für deutsch und englisch.

  Zugriffsrechte beachten: Ein Benutzer kann nur die Dokumente sehen, für die
    er auch Leserechte hat. (Aufwand: 2 Tage)
  Multiindexsuche: (Aufwand: 4 Std., vorerst zurückgestellt)
    Mit der selben Suchmaske mehrere Indizes durchsuchen
  Handbuch aktualisieren:
    - Such-JSP: Zusätzliche Eingabefelder für bestimmte Felder können mit
      "field.feldName" hinzugefügt werden.
    - Init-Parameter von configFile nach searchConfigFile umbenannt.

  Desktopsuche: Task-Icon für Linux
  Desktopsuche: Mime-Types konfigurierbar
  Bug: "http://www.murfman.de" wird geparst, aber nicht indexiert.
    (Regex für HTML-Präparator falsch)
  Desktopsuche: Port einstellbar
  Desktopsuche: Zugriff von außen für einstellbare Benutzer/Passwort-Paare
    erlauben.
  Desktopsuche: Bei Update-Installation alte Konfiguration nicht überschreiben.
  Desktopsuche: Schönere Fehlerseite (errorpage benutzen)
  Desktopsuche: Nach Speichern der Konfiguration nur dann neu indexieren, wenn
    sich etwas geändert hat, das den Index verändert.
  Desktopsuche: Status: Aktueller Index: Größe in MB, Anzahl Dokumente.
    Aktuelle Indexierung: Aktuelle Anzahl Indexierte Dokumente.
  Desktopsuche: Aktuelle Indexierung stoppen.
  Crawler: Arbeitspeicher sparen: Dateien vom Dateisystem nicht ins
    mFoundUrlSet oder mIgnoredUrlSet aufnehmen. Beim Dateisystem ist durch die
    klare Baumstruktur sowieso klar, welche Dokumente schon bearbeitet wurden.
  	(Dazu muss Start-List muss untereinander präfixfrei sein!)
  Crawler: Arbeitspeicher sparen: Erst Dateien an mJobList anhängen, dann
  	Unterverzeichnisse. So wird die mJobList klein gehalten.
  Präperatoren in eigene Jars kapseln. Alle Jars werden in ein Verzeichnis
    gepackt und beim Start geladen.
    So ist im regain.jar nur das, was regain selbst braucht und die
    Präperatoren lassen sich leichter austauschen (insbesondere verschiedene
    Versionen der selben Implementierung). Außerdem können andere auch
    Präperatoren anbieten, die dann sehr einfach eingebunden werden können.
